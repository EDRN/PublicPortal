/* This is the default varnish cache server configuration. It uses will
   proxy Plone, which should have Products.CacheSetup installed and
   configured.

   This file based on the Ãœber Buildout Mark II.   

   Copyright 2010 California Institute of Technology. ALL RIGHTS RESERVED.
   U.S. Government sponsorship acknowledged

   Note that cache.conf is generated from cache.conf.template.
 */

/* Configure transform server as back end */
backend transform {
    .host = "${hosts:balancer}";
    .port = "${ports:balancer}";
}

/* Only allow PURGE from localhost */
acl purge {
    "127.0.0.1";
}

sub vcl_recv {
    
    /* Send to backend upon receive */
    
    set req.grace = 120s;
    set req.backend = transform;
    
    if (req.request == "PURGE") {
        if (!client.ip ~ purge) {
            error 405 "Not allowed.";
        }
        lookup;
    }

    if (req.request != "GET" &&
        req.request != "HEAD" &&
        req.request != "PUT" &&
        req.request != "POST" &&
        req.request != "TRACE" &&
        req.request != "OPTIONS" &&
        req.request != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        pipe;
    }

    if (req.request != "GET" && req.request != "HEAD") {
        /* We only deal with GET and HEAD by default */
        pass;
    }

    if (req.http.If-None-Match) {
        pass;
    }

    lookup;
}

sub vcl_pipe {
    /* This is not necessary if you do not do any request rewriting. */
    set req.http.connection = "close";
}

sub vcl_hit {
    if (req.request == "PURGE") {
        purge_url(req.url);
        error 200 "Purged";
    }

    if (!obj.cacheable) {
        pass;
    }
}

sub vcl_miss {
    if (req.request == "PURGE") {
        error 404 "Not in cache";
    }

}

sub vcl_fetch {
    set obj.grace = 120s;

    if (!obj.cacheable) {
        pass;
    }
    if (obj.http.Set-Cookie) {
        pass;
    }
    if (obj.http.Cache-Control ~ "(private|no-cache|no-store)") {
        pass;
    }
    if (req.http.Authorization && !obj.http.Cache-Control ~ "public") {
        pass;
    }
    
}

sub vcl_hash {
    set req.hash += req.url;
    set req.hash += req.http.host;

    if (req.http.Accept-Encoding ~ "gzip") {
        set req.hash += "gzip";
    }
    else if (req.http.Accept-Encoding ~ "deflate") {
        set req.hash += "deflate";
    }
}

# EDRN Portal - Build Config
# ==========================
#
# Tells how to build everything.  Settings are kept in etc/base.cfg and
# overridden by ops.cfg and dev.cfg.

# RDFLIB
# ------
#
# The maintainer of RDFLIB has misconfigured his webserver.  The PyPI page
# says the download URL for 2.4.2 is http://rdflib.net/rdflib-2.4.2.tar.gz
# but that just gives a 302 redirection to http://www.rdflib.net/, the
# project's home page.
#
# However, http://www.rdflib.net/rdflib-2.4.2.tar.gz does work.
#
# Thanks, Daniel 'eikeon' Krech.
#
# FIXME: We can remove this when he fixes his webserver (and remove "rdflib")
# from the base-parts of etc/base.cfg.
[rdflib]
recipe = zc.recipe.egg
find-links = http://www.rdflib.net/rdflib-2.4.2.tar.gz


# lxml
# ----
#
# Changing libs on cancer.jpl.nasa.gov demands that we roll our own. Sigh.
[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml


# Feed Parser
# -----------
#
# The inane content blocker at NIH has stupidly blocked the URL
# http://pypi.python.org/packages/source/f/feedparser/feedparser-5.0.1.zip
[feedparser]
recipe = zc.recipe.egg
find-links = ${buildout:directory}/egg-cache/feedparser-5.0.1.zip
index = ${buildout:directory}/egg-cache/feedparser-5.0.1.zip


# OpenLDAP
# --------
#
# Our configuration points to the certs used by EDRN.
[openldap-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/ldap.conf.in
output = ${buildout:directory}/etc/ldap.conf
[openldap-certs]
recipe = cp.recipe.cmd
install_cmd =
    cd ${buildout:directory}/etc/cacerts
    rm -f *.0
    for f in *.cer; do
        hash=`openssl x509 -hash -noout -in $f` && ln -sf $f $hash.0
    done


# Zope Enterprise Objects database server
# ---------------------------------------
#
# Server for the Zope Object Database, ZODB.
[zeoserver]
recipe          = plone.recipe.zeoserver
effective-user  = ${users:zeo}
monitor-address = ${ports:zeo-monitor}
zeo-address     = ${hosts:zeo-server}:${ports:zeo-server}


# Zope Instances
# --------------
#
# Instances include:
# * ops instance #1/2: load balanced + SSL only instance
# * ops instance #2/2: load balanced + routine ingest
# * instance-debug: debugging & development instance
# Other instances may be added as needed.

# Zope instance #1/2
# ~~~~~~~~~~~~~~~~~~
#
# This is an operational Zope instance that the load balancer directs incoming
# HTTP to.  In addition, for TLS/SSL users, they connect directly from Apache
# to this instance, bypassing the load balancer and the cache.  Since users
# log into this instance, it must periodically create new session signing
# secrets.
[instance1]
<= instance-settings
recipe               = plone.recipe.zope2instance
http-address         = ${hosts:instance1}:${ports:instance1}
icp-address          = ${ports:instance1-icp}
zope-conf-additional = 
    <clock-server>
        method /edrn/@@createNewSecret
        period 360
        host localhost
        user ${:username}
        password ${:password}
    </clock-server>

# Zope instance #2/2
# ~~~~~~~~~~~~~~~~~~
#
# This is an operational Zope instance that the load balancer directs incoming
# HTTP to.  In addition, routine nightly ingest and other content maintenance
# tasks happen here.
[instance2]
<= instance-settings
recipe               = plone.recipe.zope2instance
http-address         = ${hosts:instance2}:${ports:instance2}
icp-address          = ${ports:instance2-icp}

# Zope debugging instance
# ~~~~~~~~~~~~~~~~~~~~~~~
#
# Instance used for operational debugging/maintenance and for development.
[instance-debug]
<= instance-settings
recipe           = plone.recipe.zope2instance
debug-mode       = on
http-address     = ${hosts:instance-debug}:${ports:instance-debug}
verbose-security = on


# Backups
# -------
# 
# This recipe has awesome defaults.  Thoroughly awesome.  Really.
[backup]
recipe = collective.recipe.backup


# Varnish Cache
# -------------
#
# Varnish is a high performance reverse caching proxy.  And, unlike Squid, it
# doesn't suck.  It takes pages computed by the Zope instances and caches them
# for future HTTP queries (however, it's bypassed for HTTPS).

[varnish]
recipe          = plone.recipe.varnish
varnish_version = 3
daemon          = ${executables:varnishd}
bind            = ${hosts:cache}:${ports:cache}
cache-size      = 256M
mode            = foreground
cache-location  = ${buildout:directory}/var/cache
name            = ${buildout:directory}/var/varnish-edrn
telnet          = ${hosts:cache}:${ports:cache-control}
balancer        = round-robin
user            = ${users:cache}
backends        = 
    .*:${hosts:instance1}:${ports:instance1}
    .*:${hosts:instance2}:${ports:instance2}


# Supervisor
# ----------
#
# Orchestrates, monitors, and restarts all related processes to this project.
[supervisor]
recipe    = collective.recipe.supervisor
port      = ${ports:supervisor}
user      = ${supervisor-settings:user}
password  = ${supervisor-settings:password}
serverurl = http://${hosts:supervisor}:${ports:supervisor}
programs  = 
    10 zeoserver    ${buildout:bin-directory}/zeoserver [fg]        true ${users:zeo}
    21 instance1    ${buildout:bin-directory}/instance1 [console]   true ${users:zope}
    22 instance2    ${buildout:bin-directory}/instance2 [console]   true ${users:zope}
    30 cache        ${buildout:bin-directory}/varnish               true


# Log Rotation
# ------------
#
# Generated log rotation file. Should be symlinked into OS's /etc/logrotate.d.
[logrotate.conf]
recipe = collective.recipe.template
input  = ${buildout:directory}/templates/logrotate.conf.in
output = ${buildout:directory}/ops/logrotate.conf


# Apache HTTPD
# ------------
#
# This generates a fragment of an Apache HTTPD configuration files that you
# can incorporate into a functioning Apache HTTPD.
[apache-httpd.conf]
recipe = collective.recipe.template
input  = ${buildout:directory}/templates/apache-httpd.conf.in
output = ${buildout:directory}/ops/apache-httpd.conf
local-ip = ${addressing:ip}
local-hostname = ${addressing:hostname}
public-hostname = ${hosts:public-hostname}
public-hostname-escaped = ${public-hostname-escaped:escaped}
dollar = $

[apache-httpd-ssl.conf]
recipe = collective.recipe.template
input  = ${buildout:directory}/templates/apache-httpd-ssl.conf.in
output = ${buildout:directory}/ops/apache-httpd-ssl.conf
local-ip = ${addressing:ip}
local-hostname = ${addressing:hostname}
public-hostname = ${hosts:public-hostname}
public-hostname-escaped = ${public-hostname-escaped:escaped}
dollar = $

[public-hostname-escaped]
recipe = mr.scripty
HOSTNAME = ${hosts:public-hostname}
escaped = return self.HOSTNAME.replace(u'.', ur'\.')


# Addressing
# ----------
#
# Come up with some reasonable guesses for the local host's public IP address
# and hostname.  Fails miserably on multihomed hosts.
[addressing]
recipe = mr.scripty
ip =
    ... import socket
    ... a = socket.gethostbyname(socket.gethostname())
    ... if a == '127.0.0.1': a = 'IP-ADDRESS-HERE'
    ... return a
hostname =
    ... import socket
    ... return socket.gethostname()


# Cron Scripts
# ------------
#
# Generate some cron scripts that need to get installed in /etc/cron.*

# hourly
# ~~~~~~
#
# Yep, every hour.
[cron.hourly]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/cron.hourly.in
output = ${buildout:directory}/ops/cron.hourly
mode = 755
dollar = $

# daily
# ~~~~~
#
# Yep, every day.
[cron.daily]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/cron.daily.in
output = ${buildout:directory}/ops/cron.daily
mode = 755
dollar = $

# Development Tools
# -----------------
#
# Handy utilities:
# * python - A python interpreter with all dependent eggs baked right in
# * omelette - All packages regardless of namespace in a single tree
# * test - Unit, functional, integration, coverage test runner


# python
# ~~~~~~
#
# Python interpreter with Zope and all other dependent eggs available
# on sys.path ("baked right in!")
[python]
recipe      = zc.recipe.egg
interpreter = python
scripts     = python
eggs        = ${instance-settings:eggs}


# omelette
# ~~~~~~~~
#
# Coalesces namespaces into a single tree.  Makes browsing source and
# finding files a lot easier.
[omelette]
recipe = collective.recipe.omelette
eggs   = ${instance-settings:eggs}


# test
# ~~~~
#
# Test runner.  Also produces XML test reports for Jenkins.  The list of eggs to
# include in the test runner can't just look at the instance eggs because it won't
# find dependent eggs for testing.  So we use the egglist recipe to include all
# of our development eggs in the [sources] section.
[test]
recipe = collective.xmltestreport
eggs =
    plone.app.testing
    ${instance-settings:eggs}
    ${eggslist:eggs}
defaults = ['--auto-color', '--auto-progress', '--verbose']


# Project Eggs List
# -----------------
#
# Takes a list of eggs from the sources configuration and yields just the egg names.
[eggslist]
recipe = mr.scripty
eggs = return u'\n'.join(self.buildout['sources'].keys())


# Minimal Plone Portal
# --------------------
#
# Create a basic stripped down Plone site named "edrn" in the database
[minimal-plone-portal]
recipe = collective.recipe.plonesite
site-id = edrn
admin-user = ${instance-settings:username}
profiles-initial =
    Products.CMFPlone:plone
    Products.CMFPlone:dependencies
    Products.CMFPlone:plone-content
    plonetheme.classic:default
products-initial =
    plone.app.ldap
    LoginLockout
instance = instance-debug
zeoserver = zeoserver


# EDRN Basic Site
# ---------------
#
# Add some basic content
[edrn-basic-site]
recipe = collective.recipe.plonesite
site-id = edrn
admin-user = ${instance-settings:username}
profiles = profile-edrnsite.policy:default
instance = instance-debug
zeoserver = zeoserver

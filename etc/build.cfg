# EDRN Portal - Build Config
# ==========================
#
# Tells how to build everything.  Settings are kept in etc/base.cfg and
# overridden by ops.cfg and dev.cfg.


# OpenLDAP
# --------
#
# Robust, commercial-grade, open source LDAP service that's become the world
# leader. We build it without the server (just need the client code).
[openldap]
recipe = hexagonit.recipe.cmmi
url    = ${urls:openldap}
md5sum = ${md5sums:openldap}
configure-options =
    --bindir=${buildout:bin-directory}
    --disable-dependency-tracking
    --disable-slapd
    --with-tls
    --without-cyrus-sasl
[openldap-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/ldap.conf.in
output = ${openldap:location}/etc/openldap/ldap.conf


# Python-LDAP
# -----------
#
# Python bindings to enable client LDAP calls from Python code.
[python-ldap]
recipe       = zc.recipe.egg:custom
egg          = python-ldap
include-dirs = ${openldap:location}/include
library-dirs = ${openldap:location}/lib
rpath        = ${openldap:location}/lib



# Zope Enterprise Objects database server
# ---------------------------------------
#
# Server for the Zope Object Database, ZODB.
[zeoserver]
recipe          = plone.recipe.zeoserver
effective-user  = ${users:zeo}
monitor-address = ${ports:zeo-monitor}
zeo-address     = ${hosts:zeo-server}:${ports:zeo-server}


# Zope Instances
# --------------
#
# Instances include:
# * ops instance #1/2: load balanced + SSL only instance
# * ops instance #2/2: load balanced + routine ingest
# * instance-debug: debugging & development instance
# Other instances may be added as needed.

# Zope instance #1/2
# ~~~~~~~~~~~~~~~~~~
#
# This is an operational Zope instance that the load balancer directs incoming
# HTTP to.  In addition, for TLS/SSL users, they connect directly from Apache
# to this instance, bypassing the load balancer and the cache.  Since users
# log into this instance, it must periodically create new session signing
# secrets.
[instance1]
<= instance-settings
recipe               = plone.recipe.zope2instance
http-address         = ${hosts:instance1}:${ports:instance1}
icp-address          = ${ports:instance1-icp}
zope-conf-additional = 
    <clock-server>
        method /edrn/@@createNewSecret
        period 360
        host localhost
        user ${:username}
        password ${:password}
    </clock-server>

# Zope instance #2/2
# ~~~~~~~~~~~~~~~~~~
#
# This is an operational Zope instance that the load balancer directs incoming
# HTTP to.  In addition, routine nightly ingest and other content maintenance
# tasks happen here.
[instance2]
<= instance-settings
recipe               = plone.recipe.zope2instance
http-address         = ${hosts:instance2}:${ports:instance2}
icp-address          = ${ports:instance2-icp}
zope-conf-additional = 
    <clock-server>
        method /edrn/@@ingestEverythingFully
        period 86400
        host localhost
        user ${instance-settings:username}
        password ${instance-settings:password}
    </clock-server>

# Zope debugging instance
# ~~~~~~~~~~~~~~~~~~~~~~~
#
# Instance used for operational debugging/maintenance and for development.
[instance-debug]
<= instance-settings
recipe           = plone.recipe.zope2instance
debug-mode       = on
http-address     = ${hosts:instance-debug}:${ports:instance-debug}
verbose-security = on


# Backups
# -------
# 
# This recipe has awesome defaults.  Thoroughly awesome.
[backup]
recipe = collective.recipe.backup


# PCRE
# ----
#
# Perl Compatible Regular Expressions are used by Varnish.
[pcre-build]
recipe = hexagonit.recipe.cmmi
url = ${urls:pcre}
md5sum = ${md5sums:pcre}
configure-options =
    --disable-dependency-tracking
    --enable-utf8
    --enable-unicode-properties

# Varnish Cache
# -------------
#
# Varnish is a high performance reverse caching proxy.  And, unlike Squid, it
# doesn't suck.  It takes pages computed by the Zope instances and caches them
# for future HTTP queries (however, it's bypassed for HTTPS).  Here, we build
# and configure it.

# Building Varnish
# ~~~~~~~~~~~~~~~~
[varnish-build]
recipe = hexagonit.recipe.cmmi
url = ${urls:varnish}
md5sum = ${md5sums:varnish}
configure-options =
    --bindir=${buildout:bin-directory}
    --disable-dependency-tracking
    --with-pcre-config=${pcre-build:location}/bin/pcre-config
    PCRE_CFLAGS=-I${pcre-build:location}/include
    PCRE_LIBS="-L${pcre-build:location}/lib -lpcre"

# Cache Config
# ~~~~~~~~~~~~
#
# This takes the built Varnish and generates startup scripts and configuration.
[varnish]
recipe         = plone.recipe.varnish
daemon         = ${varnish-build:location}/sbin/varnishd
bind           = ${hosts:cache}:${ports:cache}
cache-size     = 256M
mode           = foreground
cache-location = ${buildout:directory}/var/cache
telnet         = ${hosts:cache}:${ports:cache-control}
balancer       = round-robin
backends       = 
    .*:${hosts:instance1}:${ports:instance1}
    .*:${hosts:instance2}:${ports:instance2}


# Supervisor
# ----------
#
# Orchestrates, monitors, and restarts all related processes to this project.
[supervisor]
recipe    = collective.recipe.supervisor
port      = ${ports:supervisor}
user      = ${supervisor-settings:user}
password  = ${supervisor-settings:password}
serverurl = http://${hosts:supervisor}:${ports:supervisor}
programs  = 
    10 zeoserver    ${buildout:bin-directory}/zeoserver [fg]        true ${users:zeo}
    21 instance1    ${buildout:bin-directory}/instance1 [console]   true ${users:zope}
    22 instance2    ${buildout:bin-directory}/instance2 [console]   true ${users:zope}
    30 cache        ${buildout:bin-directory}/varnish               true ${users:cache}


# Log Rotation
# ------------
#
# Generated log rotation file. Should be symlinked into OS's /etc/logrotate.d.
[logrotate.conf]
recipe = collective.recipe.template
input  = ${buildout:directory}/templates/logrotate.conf.in
output = ${buildout:directory}/ops/logrotate.conf
    

# Apache HTTPD
# ------------
#
# This generates a fragment of an Apache HTTPD configuration file that you
# can incorporate into a functioning Apache HTTPD.  Just make the appropriate
# updates.  The generated template will contain some best guesses for
# various settings, but you'll need to exercise due diligence.
[apache-httpd.conf]
recipe = collective.recipe.template
input  = ${buildout:directory}/templates/apache-httpd.conf.in
output = ${buildout:directory}/ops/apache-httpd.conf
local-ip = ${addressing:ip}
local-hostname = ${addressing:hostname}

# Addressing
#
# Come up with some reasonable guesses for the local host's public IP address
# and hostname.  Fails miserably on multihomed hosts.
[addressing]
recipe = mr.scripty
ip =
    ... import socket
    ... a = socket.gethostbyname(socket.gethostname())
    ... if a == '127.0.0.1': a = 'IP-ADDRESS-HERE'
    ... return a
hostname =
    ... import socket
    ... return socket.gethostname()


# Development Tools
# -----------------
#
# Handy utilities:
# * python - A python interpreter with all dependent eggs baked right in
# * omelette - All packages regardless of namespace in a single tree
# * test - Unit, functional, integration, coverage test runner


# python
# ~~~~~~
#
# Python interpreter with Zope and all other dependent eggs available
# on sys.path ("baked right in!")
[python]
recipe      = zc.recipe.egg
interpreter = python
scripts     = python
eggs        = ${instance-settings:eggs}


# omelette
# ~~~~~~~~
#
# Coalesces namespaces into a single tree.  Makes browsing source and
# finding files a lot easier.
[omelette]
recipe = collective.recipe.omelette
eggs   = ${instance-settings:eggs}


# test
# ~~~~
#
# Test runner.  Also produces XML test reports for Jenkins.  The list of eggs to
# include in the test runner can't just look at the instance eggs because it won't
# find dependent eggs for testing.  So we use the egglist recipe to include all
# of our development eggs in the [sources] section.
[test]
recipe = collective.xmltestreport
eggs =
    ${instance-settings:eggs}
    ${eggslist:eggs}
defaults = ['--auto-color', '--auto-progress', '--verbose']


# Project Eggs List
# -----------------
#
# Takes a list of eggs from the sources configuration and yields just the egg names.
[eggslist]
recipe = mr.scripty
eggs = return u'\n'.join(self.buildout['sources'].keys())

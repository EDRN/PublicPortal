# Basic Build
# ===========
#
# Basic setup of dependent packages and parts of the EDRN public portal. 
# Based on the Ãœber Buildout Mark II.
#
# Copyright 2009 California Institute of Technology. ALL RIGHTS RESERVED. U.S.
# Government sponsorship acknowledged

# Zope Application Server
# -----------------------
#
# Setup for version 2 of the Zope.  Zope is an open source, Python-based
# application server.
[zope2]
recipe         = plone.recipe.zope2install
fake-zope-eggs = True
url            = ${downloads:zope}
additional-fake-eggs = 
    ZConfig
    ZODB3
    pytz
skip-fake-eggs =
    zope.testing
    zope.i18n
    zope.proxy


# Zope Enterprise Objects
# -----------------------
#
# ZEO, database server for Zope.
[zeoserver]
recipe         = plone.recipe.zope2zeoserver
blob-storage   = ${zeoserver:zeo-var}/blobstorage
effective-user = ${users:zope}
eggs           = ZODB3
zeo-address    = ${ports:zeo-server}
zeo-var        = ${buildout:directory}/var
zope2-location = ${zope2:location}


# Zope Application Server Instances
# ---------------------------------
#
# These are individual instances of the Zope app server. instance1 and
# instance2 are used in operations for load balanacing. instance-debug is used
# during development and for unit, integration, and coverage tests.
[instance1]
recipe         = collective.recipe.zope2cluster
instance-clone = instance-settings
http-address   = ${hosts:instance1}:${ports:instance1}
zope-conf-additional =
    <icp-server>
        address ${ports:instance1-icp}
    </icp-server>

[instance2]
recipe         = collective.recipe.zope2cluster
instance-clone = instance-settings
http-address   = ${hosts:instance2}:${ports:instance2}
zope-conf-additional =
    <icp-server>
        address ${ports:instance2-icp}
    </icp-server>

[instance-debug]
recipe           = collective.recipe.zope2cluster
instance-clone   = instance-settings
debug-mode       = on
http-address     = ${hosts:instance-debug}:${ports:instance-debug}
verbose-security = on
zeo-client       = False


# Cyrus SASL
# ----------
#
# Simple Authentication and Security Layer by Project Cyrus at CMU.
# Version 2.1.23 is buggy when we configure with --enable-static,
# so the pre-make-hook fixes that.
[cyrus-sasl-build]
recipe = hexagonit.recipe.cmmi
url               = ${downloads:cyrus-sasl}
md5sum            = ${downloads:cyrus-sasl-md5}
configure-options =
    --enable-static
    --disable-macos-framework
pre-make-hook     = ${buildout:directory}/patches/fix-cyrus-sasl.py:main


# OpenLDAP
# --------
#
# Robust, commercial-grade, open source LDAP service that's become the world
# leader. We build it without the server (just need the client code) and with
# SASL so python-ldap will be happy (we don't actually use SASL).
[openldap-build]
recipe = hexagonit.recipe.cmmi
url    = ${downloads:openldap}
md5sum = ${downloads:openldap-md5}
configure-options =
    --with-sasl
    --with-tls
    --disable-slapd
    CPPFLAGS=-I${cyrus-sasl-build:location}/include
    LDFLAGS=-L${cyrus-sasl-build:location}/lib


# Python-LDAP
# -----------
#
# Python bindings to enable client LDAP calls from Python code.
[python-ldap]
recipe       = zc.recipe.egg:custom
egg          = python-ldap
include-dirs =
    ${cyrus-sasl-build:location}/include/sasl
    ${openldap-build:location}/include
library-dirs =
    ${cyrus-sasl-build:location}/lib
    ${cyrus-sasl-build:location}/lib/sasl2
    ${openldap-build:location}/lib
rpath =
    ${cyrus-sasl-build:location}/lib
    ${cyrus-sasl-build:location}/lib/sasl2
    ${openldap-build:location}/lib


# PCRE
# ----
#
# PERL Compatible Regular Expresions.  PERL's legacy seems to be in its
# regexes, and nothing more.  We don't need to actually build this package,
# however.  Nginx does access its sources directly, though, so we disable
# building and keep the extracted source code.
[pcre-build]
recipe            = hexagonit.recipe.cmmi
url               = ${downloads:pcre}
md5sum            = ${downloads:pcre-md5}
configure-command = true
make-binary       = true
keep-compile-dir  = true


# NGINX
# -----
#
# High performance, low memory HTTP server. NGINX is preferable to Apache
# HTTPD because it performs just as well (if not better) than Apache HTTPD,
# yet uses far less memory.
[nginx-build]
recipe = hexagonit.recipe.cmmi
url    = ${downloads:nginx}
md5sum = ${downloads:nginx-md5}
patches =
    ${buildout:directory}/patches/nginx-xslt.patch
    ${buildout:directory}/patches/nginx-xslt-options.patch
    ${buildout:directory}/patches/nginx-xslt-conf.patch
configure-options =
    --with-http_stub_status_module
    --with-http_ssl_module
    --conf-path=${buildout:directory}/operations/nginx/default.conf
    --error-log-path=${buildout:directory}/var/log/main-error.log
    --pid-path=${buildout:directory}/var/main.pid
    --lock-path=${buildout:directory}/var/main.lock
    --with-pcre=${pcre-build:compile-directory}/${downloads:pcre-version}


# Varnish
# -------
#
# High performance reverse caching proxy. Varnish's sole job is to cache
# computed pages from a backend content source. And, unlike Squid, Varnish's
# architecture does not suck in the least.
[varnish-build]
recipe = hexagonit.recipe.cmmi
url    = ${downloads:varnish}
md5sum = ${downloads:varnish-md5}


# HAProxy
# -------
#
# High performance HTTP load balancer. HAProxy balances the load to the
# backend Zope instances (instance1 and instance2).
[haproxy-build]
recipe = plone.recipe.haproxy
url    = ${downloads:haproxy}
md5sum = ${downloads:haproxy-md5}
cpu    = ${build:cpu}
target = ${build:target}


# Public Facing Webserver Configuration
# -------------------------------------
#
# Configuration for the main NGINX webserver that faces the public (ie, ports
# 80 and 443).
[main-config]
recipe = collective.recipe.template
input  = ${buildout:directory}/operations/main.conf.template
output = ${buildout:directory}/operations/main.conf


# Cache Configuration
# -------------------
#
# Configuration for the Varnish caching proxy.
[cache-config]
recipe = collective.recipe.template
input  = ${buildout:directory}/operations/cache.conf.template
output = ${buildout:directory}/operations/cache.conf

[cache]
recipe     = plone.recipe.varnish
bind       = ${hosts:cache}:${ports:cache}
cache-size = 256M
config     = ${buildout:directory}/operations/cache.conf
daemon     = ${buildout:directory}/parts/varnish-build/sbin/varnishd
mode       = foreground
user       = ${users:cache}


# LDAP Configuration
# ------------------
#
# Configuration file for the LDAP library.  Essentially it points to EDRN's
# self-signed, handmade security certificate.
[ldap-config]
recipe = collective.recipe.template
input  = ${buildout:directory}/operations/ldap.conf.template
output = ${buildout:directory}/parts/openldap-build/etc/openldap/ldap.conf


# Load Balancer Configuration
# ---------------------------
#
# Configuration for the HAProxy load balancer.
[balancer-config]
recipe = collective.recipe.template
input  = ${buildout:directory}/operations/balancer.conf.template
output = ${buildout:directory}/operations/balancer.conf
    

# Supervisor
# ----------
#
# Supervisor to orchestrate, monitor, and control all dependent processes. 
# This is what gets started at boot time.
[supervisor]
recipe    = collective.recipe.supervisor
password  = ${supervisor-settings:password}
port      = ${ports:supervisor}
serverurl = http://${hosts:supervisor}:${ports:supervisor}
user      = ${supervisor-settings:user}
# Programs to monitor & run. Columns are: priority, name, executable,
# command-line arguments in brackets, true to redirect stderr to stdout and
# capture both, and effective user ID.
programs =
    10 zeo       ${zeoserver:location}/bin/runzeo                                                           true ${users:zope}
    20 instance1 ${buildout:directory}/parts/instance1/bin/runzope                                          true ${users:zope}
    20 instance2 ${buildout:directory}/parts/instance2/bin/runzope                                          true ${users:zope}
    30 balancer  ${buildout:directory}/bin/haproxy  [-f ${buildout:directory}/operations/balancer.conf -db] true ${users:balancer}
    40 cache     ${buildout:directory}/bin/cache                                                            true ${users:cache}
    50 main      ${nginx-build:location}/sbin/nginx [-c ${buildout:directory}/operations/main.conf]         true


# Log Rotation
# ------------
#
# Rotation for log files. The output file should be symlinked into /etc/logrotate.d.
[logrotate.conf]
recipe = collective.recipe.template
input  = ${buildout:directory}/operations/logrotate.conf.template
output = ${buildout:directory}/operations/logrotate.conf
    

# Early Detection Research Network
# --------------------------------
#
# Deployment of a Plone-based website for the Early Detection Research Network.
[deploy-edrnsite]
recipe     = collective.recipe.updateplone
admin-name = ${instance-settings:username}
backup-db  = True
install    = edrnsite.policy
pack-db    = True
plone-site = instance-debug.${plone-sites:main}
run-once   = True


# Debugging Tools
# ---------------
#
# Various debugging & development tools:
#
# * zopepy: A python interpreter with dependent eggs baked right in.
# * omelette: Namespace packages flattened out of their individual eggs.
# * roadrunner: Faster integration tests.
[zopepy]
recipe      = zc.recipe.egg
eggs        = ${instance-settings:eggs}
extra-paths = ${zope2:location}/lib/python
interpreter = zopepy
scripts     = zopepy

[omelette]
recipe   = collective.recipe.omelette
eggs     = ${instance-settings:eggs}
packages = ${zope2:location}/lib/python ./
products = ${instance-settings:products}

[roadrunner]
recipe         = roadrunner:plone
zope2-instance = instance-debug
packages-under-test =
    edrnsite.*
    eke.*
    edrn.theme

